#!/bin/bash
#
# aursync
# 
# Updates a repository stored in S3 and notifies of any package updates
#


set -uo pipefail
trap 's=$?; /send-pushover "Update Error" "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
#trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

remote_path=${REMOTE_PATH}                                  # Location within S3
repo_name=${REPO_NAME}                                      # Name of the repo (the DB file)
region=${AWS_REGION}                                        # AWS region
local_path=$(echo $remote_path | sed 's|s3:/||g')           # Location stored within the container
aur_key=${AUR_KEY}                                          # Name of GPG key within AWS parameter store

# Function to check if an array contains a string
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

mkdir -p "$local_path"

# Import the required GPG keys
aws ssm get-parameter --region "${region}" --name "${aur_key}" --with-decryption | jq -r ".Parameter.Value" > aur.key
sudo -u makepkg gpg --import aur.key
gpg --homedir /etc/pacman.d/gnupg --import aur.key
rm aur.key
GPGKEY=$(sudo -u makepkg gpg --list-keys --keyid-format LONG | grep pub | grep -o -P '(?<=/)[A-Z0-9]{16}')
#pacman-key --add <(sudo -u makepkg gpg --export "${GPGKEY}")
#pacman-key --keyserver keys.gnupg.net -r "${GPGKEY}"
pacman-key --lsign-key "${GPGKEY}"


echo "Sync remote DB to local"
aws s3 sync \
    --region ${region} \
    --acl public-read \
    --exclude "*" \
    --include "*files.tar.xz" \
    --include "*db.tar.xz" \
    ${remote_path}/ ${local_path}/

ln -sf "$repo_name.db.tar.xz" "$local_path/$repo_name.db"
ln -sf "$repo_name.files.tar.xz" "$local_path/$repo_name.files"


echo "Add repo to pacman.conf"
cat >> /etc/pacman.conf << EOF
[${repo_name}]
Server = file://${local_path}
SigLevel = Optional TrustAll
EOF
pacman -Sy


pkgs=$(aur repo -Su -d $repo_name)
echo "Upgrading packages"
sudo chown -R makepkg:users "$local_path"
sudo -u makepkg aur sync -s --no-view -d "$repo_name" --root "$local_path" -u --noconfirm || true
failed_pkgs=$(aur repo -Su -d $repo_name)


# Clean up unnecessary packages
OLDIFS=$IFS
IFS=' '
echo "Removing packages in the official repo"
official=$(pacman -Sl | grep -v "$repo_name" | cut -d' ' -f2 | sort)
personal=$(aur repo -r "$local_path" -d "$repo_name" -l | awk '{print $1}' | sort)
packages_to_remove=$(comm -12 <(echo $official) <(echo $personal))
IFS=$OLDIFS

sudo -u makepkg repo-remove "$local_path/$repo_name.db.tar.xz" $packages_to_remove -s

echo "Cleaning up old packages..."
old_files=$(aws s3 ls "$remote_path/" | awk '{print $4}' | grep pkg.tar.xz | grep -Fvf \
    <(tar --exclude="*/*" -Jtf "$local_path/$repo_name.db.tar.xz" 2>/dev/null | sed 's|/||g') || true)

for file in $old_files; do
    aws s3 rm \
        --region ${region} \
        "$remote_path/$file"
done


echo "Sync local DB to remote"
aws s3 sync \
    --region ${region} \
    --acl public-read \
    --follow-symlinks \
    ${local_path}/ ${remote_path}/


echo "Notify of built packages"
for pkg in $pkgs
do
    msg_status=""
    if containsElement "$pkg" "${failed_pkgs[@]}"; then
        msg_status="Failed update for"
    else
        msg_status="Updated"
    fi

    IFS=':'
    read -ra ADDR <<< "$pkg"
    IFS=$'\n\t'

    pkg_name=${ADDR[0]}
    pkg_ver=${ADDR[1]}

    /send-pushover "${msg_status} ${pkg_name}" "${pkg_ver}"
done

